Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/uiDesigner.xml	
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ru/mtsbank/hw/animalservice/CreateAnimal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimal.java b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimal.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimal.java	
@@ -0,0 +1,63 @@
+package ru.mtsbank.hw.animalservice;
+
+import ru.mtsbank.hw.animal.AbstractAnimal;
+import ru.mtsbank.hw.animal.fish.models.Barbus;
+import ru.mtsbank.hw.animal.fish.models.GoldFish;
+import ru.mtsbank.hw.animal.fish.models.Guppy;
+import ru.mtsbank.hw.animal.herbivores.models.Cow;
+import ru.mtsbank.hw.animal.pet.models.Cat;
+import ru.mtsbank.hw.animal.pet.models.Dog;
+import ru.mtsbank.hw.animal.pet.models.Hamster;
+import ru.mtsbank.hw.animal.predator.models.Lion;
+import ru.mtsbank.hw.animal.predator.models.Shark;
+import ru.mtsbank.hw.animal.predator.models.Wolf;
+
+import java.math.BigDecimal;
+
+public class CreateAnimal {
+    public AbstractAnimal create(AnimalTypes types){
+        AbstractAnimal animal;
+        switch (types) {
+            case CAT:
+                animal = new Cat("Чиширская", "Барсик",
+                        new BigDecimal(123.5698), "Агресивный");
+                break;
+            case DOG:
+                animal = new Dog("Дворняга","Шарик",
+                        new BigDecimal(300.123),"Дружелюбный");
+                break;
+            case HAMSTER:
+                animal = new Hamster("Обыкновенный хомяк", "Кругляш",
+                        new BigDecimal(543), "Ленивый");
+                break;
+            case BARBUS:
+                animal = new Barbus("Барбус Алый","Немо",
+                        new BigDecimal(1000.9999), "Нет");
+                break;
+            case GUPPY:
+                animal = new Guppy("Гуппи", "Губка-Боп",
+                        new BigDecimal(10943.3232),"Ну такой");
+                break;
+            case GOLDFISH:
+                animal = new GoldFish("Золотая-рыбка", "Чудо",
+                        new BigDecimal(3213.22),"Богатый" );
+                break;
+            case SHARK:
+                animal = new Shark("Белая", "Killer","Agresive");
+                break;
+            case WOLF:
+                animal = new Wolf("Simple", "Volk", "Killer");
+                break;
+            case LION:
+                animal = new Lion("Simle", "Korol", "Pain");
+                break;
+            case COW:
+                animal = new Cow("Red", "Burenka",
+                        new BigDecimal(200000.9872),"Pain");
+                break;
+            default:
+                throw new IllegalArgumentException("Wrong type: " + types);
+        }
+        return animal;
+    }
+}
Index: src/main/java/ru/mtsbank/hw/animalservice/AnimalTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/animalservice/AnimalTypes.java b/src/main/java/ru/mtsbank/hw/animalservice/AnimalTypes.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/animalservice/AnimalTypes.java	
@@ -0,0 +1,14 @@
+package ru.mtsbank.hw.animalservice;
+
+public enum AnimalTypes {
+    BARBUS,
+    GOLDFISH,
+    GUPPY,
+    COW,
+    CAT,
+    DOG,
+    HAMSTER,
+    LION,
+    SHARK,
+    WOLF,
+}
Index: src/main/java/ru/mtsbank/hw/animal/AbstractAnimal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/animal/AbstractAnimal.java b/src/main/java/ru/mtsbank/hw/animal/AbstractAnimal.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/animal/AbstractAnimal.java	
@@ -0,0 +1,89 @@
+package ru.mtsbank.hw.animal;
+
+import javax.swing.text.DateFormatter;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+import java.util.Objects;
+import java.util.concurrent.ThreadLocalRandom;
+
+
+public abstract class AbstractAnimal implements Animal {
+    protected String breed;
+    protected String name;
+    protected BigDecimal cost;
+    protected String character;
+    protected LocalDate birthDate;
+
+    public AbstractAnimal(String breed, String name, BigDecimal cost, String character) {
+        this.breed = breed;
+        this.name = name;
+        this.cost= cost.setScale(2,RoundingMode.DOWN);
+        this.character = character;
+        this.birthDate = randomDate();
+    }
+
+    public AbstractAnimal(String breed, String name, String character) {
+        this.breed = breed;
+        this.name = name;
+        this.character = character;
+        this.birthDate = randomDate();
+    }
+
+    private LocalDate randomDate(){
+        long betweenDays = ChronoUnit.DAYS.between(LocalDate.of(1900,1,1),
+                LocalDate.now());
+        long random = ThreadLocalRandom.current().nextLong(betweenDays);
+        return LocalDate.of(1900,1,1).plusDays(random);
+    }
+
+    public String getBreed() {
+        return breed;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public BigDecimal getCost() {
+        return cost;
+    }
+
+    @Override
+    public String getCharacter() {
+        return character;
+    }
+
+    @Override
+    public LocalDate getBirthDate() {
+        return birthDate;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        AbstractAnimal that = (AbstractAnimal) o;
+        return Objects.equals(breed, that.breed) && Objects.equals(name, that.name) && Objects.equals(cost, that.cost) && Objects.equals(character, that.character) && Objects.equals(birthDate, that.birthDate);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(breed, name, cost, character, birthDate);
+    }
+
+    @Override
+    public String toString() {
+        return "AbstractAnimal{" +
+                "breed='" + breed + '\'' +
+                ", name='" + name + '\'' +
+                ", cost=" + cost +
+                ", character='" + character + '\'' +
+                ", birthDate=" + birthDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")) +
+                '}';
+    }
+}
Index: src/main/java/ru/mtsbank/hw/searchservise/SearchService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/searchservise/SearchService.java b/src/main/java/ru/mtsbank/hw/searchservise/SearchService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/searchservise/SearchService.java	
@@ -0,0 +1,20 @@
+package ru.mtsbank.hw.searchservise;
+
+import ru.mtsbank.hw.animal.AbstractAnimal;
+
+public interface SearchService {
+    /**
+     * Метод находит всех животных которые родились в високосный год
+     * */
+
+    AbstractAnimal[] findLeapYearNames(AbstractAnimal[] animals);
+
+    /**
+     * Метод находит всех животных старших N лет
+     * */
+    AbstractAnimal[] findOlderAnimal(AbstractAnimal[] animals, int N);
+    /**
+     * Вывод дупликатов животных
+     * */
+    void findDuplicate(AbstractAnimal[] animals);
+}
Index: src/main/java/ru/mtsbank/hw/searchservise/SearchServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/searchservise/SearchServiceImpl.java b/src/main/java/ru/mtsbank/hw/searchservise/SearchServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/searchservise/SearchServiceImpl.java	
@@ -0,0 +1,45 @@
+package ru.mtsbank.hw.searchservise;
+
+import ru.mtsbank.hw.animal.AbstractAnimal;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.List;
+
+public class SearchServiceImpl implements SearchService{
+
+    @Override
+    public AbstractAnimal[] findLeapYearNames(AbstractAnimal[] animals) {
+        List<AbstractAnimal> list = new ArrayList<>();
+        for(int i = 0; i < animals.length; i++){
+            if(animals[i].getBirthDate() != null) {
+                if (animals[i].getBirthDate().isLeapYear()) {
+                    list.add(animals[i]);
+                }
+            }
+        }
+        AbstractAnimal[] abstractAnimals = new AbstractAnimal[list.size()];
+        return list.toArray(abstractAnimals);
+    }
+
+    @Override
+    public AbstractAnimal[] findOlderAnimal(AbstractAnimal[] animals, int N) {
+        List<AbstractAnimal> list = new ArrayList<>();
+        for(int i = 0; i < animals.length; i++){
+            if(animals[i].getBirthDate() != null) {
+                if (LocalDate.now().getYear() - animals[i].getBirthDate().getYear() > N) {
+                    list.add(animals[i]);
+                }
+            }
+        }
+        AbstractAnimal[] abstractAnimals = new AbstractAnimal[list.size()];
+        return list.toArray(abstractAnimals);
+    }
+
+    @Override
+    public void findDuplicate(AbstractAnimal[] animals) {
+        for(int i = 0; i < animals.length; i++){
+            System.out.println(animals.clone());
+        }
+    }
+}
Index: src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalServiceImpl.java b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalServiceImpl.java	
@@ -0,0 +1,21 @@
+package ru.mtsbank.hw.animalservice;
+
+import ru.mtsbank.hw.animal.AbstractAnimal;
+
+import java.util.Random;
+
+public class CreateAnimalServiceImpl implements CreateAnimalService {
+    @Override
+    public AbstractAnimal[] createAnimal() {
+        return CreateAnimalService.super.createAnimal();
+    }
+    public AbstractAnimal[] createAnimal(int num) {
+        CreateAnimal createAnimal = new CreateAnimal();
+        AbstractAnimal[] abstractAnimals = new AbstractAnimal[num];
+        for(int i = 0; i < num; i++){
+            abstractAnimals[i] = createAnimal.create(AnimalTypes.values()
+                    [new Random().nextInt(AnimalTypes.values().length)]);
+        }
+        return abstractAnimals;
+    }
+}
Index: src/main/java/ru/mtsbank/hw/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/Main.java b/src/main/java/ru/mtsbank/hw/Main.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/Main.java	
@@ -0,0 +1,17 @@
+package ru.mtsbank.hw;
+
+import ru.mtsbank.hw.animalservice.CreateAnimalServiceImpl;
+import ru.mtsbank.hw.searchservise.SearchService;
+import ru.mtsbank.hw.searchservise.SearchServiceImpl;
+
+import java.util.Arrays;
+
+public class Main {
+    public static void main(String[] args) {
+        CreateAnimalServiceImpl createAnimalService = new CreateAnimalServiceImpl();
+        SearchService service = new SearchServiceImpl();
+        System.out.println(Arrays.toString(service.findLeapYearNames(createAnimalService.createAnimal(23))));
+        System.out.println(Arrays.deepToString(service.findOlderAnimal(createAnimalService.createAnimal(),5)));
+        service.findDuplicate(createAnimalService.createAnimal());
+    }
+}
Index: src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalService.java b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/mtsbank/hw/animalservice/CreateAnimalService.java	
@@ -0,0 +1,28 @@
+package ru.mtsbank.hw.animalservice;
+
+import ru.mtsbank.hw.animal.AbstractAnimal;
+
+import java.util.Random;
+
+public interface CreateAnimalService {
+
+    /**
+     * Метод который проверяет
+     * к кому типу относиться животное
+     * */
+    default AbstractAnimal[] checkTypeAnimal(int num){
+        CreateAnimal createAnimal = new CreateAnimal();
+        AbstractAnimal[] abstractAnimals = new AbstractAnimal[num];
+        int i = 0;
+        while(i < num){
+            abstractAnimals[i] = createAnimal.create(AnimalTypes.values()
+                    [new Random().nextInt(AnimalTypes.values().length)]);
+            i++;
+        }
+        return abstractAnimals;
+        }
+
+        default AbstractAnimal[] createAnimal(){
+        return checkTypeAnimal(10);
+        }
+    }
diff --git a/.gradle/8.4/dependencies-accessors/gc.properties b/.gradle/8.4/dependencies-accessors/gc.properties
new file mode 100644
diff --git a/.gradle/8.4/gc.properties b/.gradle/8.4/gc.properties
new file mode 100644
